
//이 객체를 통해 서버와의 실시간 통신을 수행 할 수 있다.
//텍스트 기반 메시지(TextMessage)나 바이너리 데이터(BinaryMessage) 를 주고 받을 수 있다.
//연결관리를 할 수 있다.
public interface WebSocketSession extends Closeable {
    String getId();- 세션의 고유 ID를 반환합니다.
                     예: String sessionId = session.getId();
                     웹소켓 세션 ID는 웹소켓 연결에 대한 고유 식별자입니다. 각 클라이언트가 웹소켓을 통해 서버에 연결할 때마다 새로운 웹소켓 세션이 생성되고,
                     그 세션마다 고유한 ID가 부여됩니다. 따라서, 같은 사용자가 여러 웹소켓 연결을 열 경우 각 연결은 다른 웹소켓 세션 ID를 가지게 됩니다.

    @Nullable
    URI getUri();

    HttpHeaders getHandshakeHeaders();

    Map<String, Object> getAttributes();
    세션에 연관된 속성들을 맵 형태로 반환.사용자 정의 데이터를 저장하거나 조회 가능

    @Nullable
    Principal getPrincipal();

    @Nullable
    InetSocketAddress getLocalAddress();

    @Nullable
    InetSocketAddress getRemoteAddress();

    @Nullable
    String getAcceptedProtocol();

    void setTextMessageSizeLimit(int messageSizeLimit);

    int getTextMessageSizeLimit();

    void setBinaryMessageSizeLimit(int messageSizeLimit);

    int getBinaryMessageSizeLimit();

    List<WebSocketExtension> getExtensions();

    void sendMessage(WebSocketMessage<?> message) throws IOException;
        서버에서 클라이언트로 메시지를 보낼 때 사용합니다.
        예: session.sendMessage(new TextMessage("Hello, Client!"));
    boolean isOpen();
isOpen():
웹소켓 연결이 열려 있는지 확인 반환 값은 true false(닫힘)
예: boolean open = session.isOpen();
    void close() throws IOException;

    void close(CloseStatus status) throws IOException;
    지정 상채와 함께 세션을 종료
}
